from typing import Any, Callable, TypeVar, Union, overload

# No need to import unused modules

_T = TypeVar("_T")

class Logger:
    def debug(self, __message: str, *args: Any, **kwargs: Any) -> None: ...
    def info(self, __message: str, *args: Any, **kwargs: Any) -> None: ...
    def warning(self, __message: str, *args: Any, **kwargs: Any) -> None: ...
    def error(self, __message: str, *args: Any, **kwargs: Any) -> None: ...
    def critical(self, __message: str, *args: Any, **kwargs: Any) -> None: ...
    def exception(self, __message: str, *args: Any, **kwargs: Any) -> None: ...
    def log(self, __level: int, __message: str, *args: Any, **kwargs: Any) -> None: ...
    def remove(self, __handler_id: int = ...) -> None: ...
    def add(self, sink: Any, **kwargs: Any) -> int: ...

    @overload
    def catch(self, function: Callable[..., _T]) -> Callable[..., _T]: ...

    @overload
    def catch(
        self,
        exception: Union[type[BaseException], tuple[type[BaseException], ...]] = ...,
        *,
        level: str = ...,
        reraise: bool = ...,
        message: str = ...,
        onerror: Callable[..., Any] = ...,
    ) -> Callable[[Callable[..., _T]], Callable[..., _T]]: ...

# Removed the non-overload decorated 'catch' method for stub file compliance
# def catch(self, *args: Any, **kwargs: Any) -> Any: ...

logger: Logger = ...

def configure(**kwargs: Any) -> None: ...
